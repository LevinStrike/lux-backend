// Code generated by mockery v2.42.1. DO NOT EDIT.

package mockusers

import (
	"github.com/LevinStrike/lux-backend/internal/services/users"
	mock "github.com/stretchr/testify/mock"
)

// MockConfiguration is an autogenerated mock type for the Configuration type
type MockConfiguration struct {
	mock.Mock
}

type MockConfiguration_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfiguration) EXPECT() *MockConfiguration_Expecter {
	return &MockConfiguration_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: service
func (_m *MockConfiguration) Execute(service *users.Service) error {
	ret := _m.Called(service)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*users.Service) error); ok {
		r0 = rf(service)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConfiguration_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockConfiguration_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - service *users.Service
func (_e *MockConfiguration_Expecter) Execute(service interface{}) *MockConfiguration_Execute_Call {
	return &MockConfiguration_Execute_Call{Call: _e.mock.On("Execute", service)}
}

func (_c *MockConfiguration_Execute_Call) Run(run func(service *users.Service)) *MockConfiguration_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*users.Service))
	})
	return _c
}

func (_c *MockConfiguration_Execute_Call) Return(_a0 error) *MockConfiguration_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfiguration_Execute_Call) RunAndReturn(run func(*users.Service) error) *MockConfiguration_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfiguration creates a new instance of MockConfiguration. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfiguration(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockConfiguration {
	mock := &MockConfiguration{}
	mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
