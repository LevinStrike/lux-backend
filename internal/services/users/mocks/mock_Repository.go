// Code generated by mockery v2.42.1. DO NOT EDIT.

package mockusers

import (
	context "context"

	entities "github.com/LevinStrike/lux-backend/internal/core/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockRepository) GetUserByEmail(ctx context.Context, email string) (entities.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entities.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entities.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockRepository_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockRepository_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockRepository_GetUserByEmail_Call {
	return &MockRepository_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockRepository_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockRepository_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_GetUserByEmail_Call) Return(_a0 entities.User, _a1 error) *MockRepository_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (entities.User, error)) *MockRepository_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, username, password
func (_m *MockRepository) Login(ctx context.Context, username string, password string) (entities.User, error) {
	ret := _m.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (entities.User, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entities.User); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockRepository_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
func (_e *MockRepository_Expecter) Login(ctx interface{}, username interface{}, password interface{}) *MockRepository_Login_Call {
	return &MockRepository_Login_Call{Call: _e.mock.On("Login", ctx, username, password)}
}

func (_c *MockRepository_Login_Call) Run(run func(ctx context.Context, username string, password string)) *MockRepository_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_Login_Call) Return(_a0 entities.User, _a1 error) *MockRepository_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_Login_Call) RunAndReturn(run func(context.Context, string, string) (entities.User, error)) *MockRepository_Login_Call {
	_c.Call.Return(run)
	return _c
}

// SignUp provides a mock function with given fields: ctx, username, password
func (_m *MockRepository) SignUp(ctx context.Context, username string, password string) (entities.User, error) {
	ret := _m.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for SignUp")
	}

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (entities.User, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entities.User); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_SignUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUp'
type MockRepository_SignUp_Call struct {
	*mock.Call
}

// SignUp is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
func (_e *MockRepository_Expecter) SignUp(ctx interface{}, username interface{}, password interface{}) *MockRepository_SignUp_Call {
	return &MockRepository_SignUp_Call{Call: _e.mock.On("SignUp", ctx, username, password)}
}

func (_c *MockRepository_SignUp_Call) Run(run func(ctx context.Context, username string, password string)) *MockRepository_SignUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_SignUp_Call) Return(_a0 entities.User, _a1 error) *MockRepository_SignUp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_SignUp_Call) RunAndReturn(run func(context.Context, string, string) (entities.User, error)) *MockRepository_SignUp_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
